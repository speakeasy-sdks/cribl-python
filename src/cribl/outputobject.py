"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from .sdkconfiguration import SDKConfiguration
from cribl import utils
from cribl._hooks import AfterErrorContext, AfterSuccessContext, BeforeRequestContext, HookContext
from cribl.models import components, errors, operations
from typing import Optional, Union

class OutputObject:
    sdk_configuration: SDKConfiguration

    def __init__(self, sdk_config: SDKConfiguration) -> None:
        self.sdk_configuration = sdk_config
        
    
    
    def create(self, request: Optional[Union[components.OutputDefault, components.OutputWebhook, components.OutputDevnull, components.OutputSyslog, components.OutputSplunk, components.OutputSplunkLb, components.OutputSplunkHec, components.OutputTcpjson, components.OutputWavefront, components.OutputSignalfx, components.OutputFilesystem, components.OutputS3, components.OutputAzureBlob, components.OutputAzureLogs, components.OutputKinesis, components.OutputHoneycomb, components.OutputAzureEventhub, components.OutputGoogleChronicle, components.OutputGoogleCloudStorage, components.OutputGoogleCloudLogging, components.OutputGooglePubsub, components.OutputKafka, components.OutputConfluentCloud, components.OutputMsk, components.OutputElastic, components.OutputNewrelic, components.OutputNewrelicEvents, components.OutputInfluxdb, components.OutputCloudwatch, components.OutputMinio, components.OutputStatsd, components.OutputStatsdExt, components.OutputGraphite, components.OutputRouter, components.OutputSns, components.OutputSqs, components.OutputSnmp, components.OutputSumoLogic, components.OutputDatadog, Union[components.OutputGrafanaCloud1, components.OutputGrafanaCloud2], components.OutputLoki, components.OutputPrometheus, components.OutputRing, components.OutputOpenTelemetry, components.OutputDataset, components.OutputCriblTCP, components.OutputCriblHTTP, components.OutputHumioHec, components.OutputDlS3, components.OutputSecurityLake]]) -> operations.CreateOutputObjectResponse:
        r"""Create Output
        Create Output
        """
        hook_ctx = HookContext(operation_id='createOutputObject', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/system/outputs'
        
        if callable(self.sdk_configuration.security):
            headers, query_params = utils.get_security(self.sdk_configuration.security())
        else:
            headers, query_params = utils.get_security(self.sdk_configuration.security)
        
        req_content_type, data, form = utils.serialize_request_body(request, Optional[Union[components.OutputDefault, components.OutputWebhook, components.OutputDevnull, components.OutputSyslog, components.OutputSplunk, components.OutputSplunkLb, components.OutputSplunkHec, components.OutputTcpjson, components.OutputWavefront, components.OutputSignalfx, components.OutputFilesystem, components.OutputS3, components.OutputAzureBlob, components.OutputAzureLogs, components.OutputKinesis, components.OutputHoneycomb, components.OutputAzureEventhub, components.OutputGoogleChronicle, components.OutputGoogleCloudStorage, components.OutputGoogleCloudLogging, components.OutputGooglePubsub, components.OutputKafka, components.OutputConfluentCloud, components.OutputMsk, components.OutputElastic, components.OutputNewrelic, components.OutputNewrelicEvents, components.OutputInfluxdb, components.OutputCloudwatch, components.OutputMinio, components.OutputStatsd, components.OutputStatsdExt, components.OutputGraphite, components.OutputRouter, components.OutputSns, components.OutputSqs, components.OutputSnmp, components.OutputSumoLogic, components.OutputDatadog, Union[components.OutputGrafanaCloud1, components.OutputGrafanaCloud2], components.OutputLoki, components.OutputPrometheus, components.OutputRing, components.OutputOpenTelemetry, components.OutputDataset, components.OutputCriblTCP, components.OutputCriblHTTP, components.OutputHumioHec, components.OutputDlS3, components.OutputSecurityLake]], "request", False, True, 'json')
        if req_content_type is not None and req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = client.prepare_request(requests_http.Request('POST', url, params=query_params, data=data, files=form, headers=headers))
            req = self.sdk_configuration.get_hooks().before_request(BeforeRequestContext(hook_ctx), req)
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(AfterErrorContext(hook_ctx), None, e)
            if e is not None:
                raise e

        if utils.match_status_codes(['401','4XX','500','5XX'], http_res.status_code):
            result, e = self.sdk_configuration.get_hooks().after_error(AfterErrorContext(hook_ctx), http_res, None)
            if e is not None:
                raise e
            if result is not None:
                http_res = result
        else:
            http_res = self.sdk_configuration.get_hooks().after_success(AfterSuccessContext(hook_ctx), http_res)
            
        
        
        res = operations.CreateOutputObjectResponse(http_meta=components.HTTPMetadata(request=req, response=http_res))
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type') or '', 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[components.Outputs])
                res.outputs = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [401, 500]:
            if utils.match_content_type(http_res.headers.get('Content-Type') or '', 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.Error)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    

