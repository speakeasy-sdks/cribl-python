"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .sdkconfiguration import SDKConfiguration
from cribl import utils
from cribl.models import errors, operations, shared
from typing import Optional, Union

class OutputObject:
    sdk_configuration: SDKConfiguration

    def __init__(self, sdk_config: SDKConfiguration) -> None:
        self.sdk_configuration = sdk_config
        
    
    def create(self, request: Union[shared.OutputDefault, shared.OutputWebhook, shared.OutputDevnull, shared.OutputSyslog, shared.OutputSplunk, shared.OutputSplunkLb, shared.OutputSplunkHec, shared.OutputTcpjson, shared.OutputWavefront, shared.OutputSignalfx, shared.OutputFilesystem, shared.OutputS3, shared.OutputAzureBlob, shared.OutputAzureLogs, shared.OutputKinesis, shared.OutputHoneycomb, shared.OutputAzureEventhub, shared.OutputGoogleChronicle, shared.OutputGoogleCloudStorage, shared.OutputGoogleCloudLogging, shared.OutputGooglePubsub, shared.OutputKafka, shared.OutputConfluentCloud, shared.OutputMsk, shared.OutputElastic, shared.OutputNewrelic, shared.OutputNewrelicEvents, shared.OutputInfluxdb, shared.OutputCloudwatch, shared.OutputMinio, shared.OutputStatsd, shared.OutputStatsdExt, shared.OutputGraphite, shared.OutputRouter, shared.OutputSns, shared.OutputSqs, shared.OutputSnmp, shared.OutputSumoLogic, shared.OutputDatadog, Union[shared.OutputGrafanaCloud1, shared.OutputGrafanaCloud2], shared.OutputLoki, shared.OutputPrometheus, shared.OutputRing, shared.OutputOpenTelemetry, shared.OutputDataset, shared.OutputCriblTCP, shared.OutputCriblHTTP, shared.OutputHumioHec, shared.OutputDlS3, shared.OutputSecurityLake]) -> operations.CreateOutputObjectResponse:
        r"""Create Output
        Create Output
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/system/outputs'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", False, True, 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateOutputObjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Outputs])
                res.outputs = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [401, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.Error)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    