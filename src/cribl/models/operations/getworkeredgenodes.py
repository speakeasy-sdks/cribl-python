"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import masterworkerentries as shared_masterworkerentries
from typing import Optional



@dataclasses.dataclass
class GetWorkerEdgeNodesRequest:
    filter_exp: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filterExp', 'style': 'form', 'explode': True }})
    r"""Filter expression evaluated against nodes"""
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Maximum number of nodes to return"""
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Pagination offset"""
    sort_exp: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sortExp', 'style': 'form', 'explode': True }})
    r"""Sorting expression evaluated against nodes"""
    




@dataclasses.dataclass
class GetWorkerEdgeNodesResponse:
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    master_worker_entries: Optional[shared_masterworkerentries.MasterWorkerEntries] = dataclasses.field(default=None)
    r"""a list of MasterWorkerEntry objects"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    

