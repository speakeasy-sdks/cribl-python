"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ...models.components import httpmetadata as components_httpmetadata
from ...models.components import masterworkerentries as components_masterworkerentries
from typing import Optional


@dataclasses.dataclass
class GetWorkerEdgeNodesRequest:
    filter_exp: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filterExp', 'style': 'form', 'explode': True }})
    r"""Filter expression evaluated against nodes"""
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Maximum number of nodes to return"""
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Pagination offset"""
    sort_exp: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sortExp', 'style': 'form', 'explode': True }})
    r"""Sorting expression evaluated against nodes"""
    



@dataclasses.dataclass
class GetWorkerEdgeNodesResponse:
    http_meta: components_httpmetadata.HTTPMetadata = dataclasses.field()
    master_worker_entries: Optional[components_masterworkerentries.MasterWorkerEntries] = dataclasses.field(default=None)
    r"""a list of MasterWorkerEntry objects"""
    

