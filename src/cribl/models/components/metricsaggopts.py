"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .aggregationmgroptions import AggregationMgrOptions
from .metricsstore import MetricsStore
from cribl import utils
from dataclasses_json import Undefined, dataclass_json
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MetricsAggOpts:
    aggs: AggregationMgrOptions = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aggs') }})
    always_bounds: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alwaysBounds'), 'exclude': lambda f: f is None }})
    metrics: Optional[MetricsStore] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metrics'), 'exclude': lambda f: f is None }})
    where: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('where'), 'exclude': lambda f: f is None }})
    

