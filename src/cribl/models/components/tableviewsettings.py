"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .columnfiltersettings import ColumnFilterSettings
from .columnformatsettings import ColumnFormatSettings
from .columnordersettings import ColumnOrderSettings
from .columnsortsettings import ColumnSortSettings
from cribl import utils
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from typing import Optional

class ViewMode(str, Enum):
    EVENT = 'event'
    TABLE = 'table'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TableViewSettings:
    show_column_totals: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('showColumnTotals') }})
    show_column_totals_pinned: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('showColumnTotalsPinned') }})
    show_row_numbers: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('showRowNumbers') }})
    show_row_totals: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('showRowTotals') }})
    show_row_totals_pinned: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('showRowTotalsPinned') }})
    view_mode: ViewMode = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('viewMode') }})
    column_filter_settings: Optional[ColumnFilterSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('columnFilterSettings'), 'exclude': lambda f: f is None }})
    column_format_settings: Optional[ColumnFormatSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('columnFormatSettings'), 'exclude': lambda f: f is None }})
    column_order_settings: Optional[ColumnOrderSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('columnOrderSettings'), 'exclude': lambda f: f is None }})
    column_sort_settings: Optional[ColumnSortSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('columnSortSettings'), 'exclude': lambda f: f is None }})
    row_number_column_width: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rowNumberColumnWidth'), 'exclude': lambda f: f is None }})
    

