"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .loggerentry import LoggerEntry
from cribl import utils
from dataclasses_json import Undefined, dataclass_json
from typing import List, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LoggerConfig:
    channels: List[LoggerEntry] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channels') }})
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    redact_fields: List[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redactFields') }})
    redact_label: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redactLabel') }})
    default_redact_fields: Optional[List[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultRedactFields'), 'exclude': lambda f: f is None }})
    

