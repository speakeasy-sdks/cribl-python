"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .appmode import AppMode
from .authconfig import AuthConfig
from .gitsettings import GitSettings
from .jobsettings import JobSettings
from .limits import Limits
from .rediscachelimits import RedisCacheLimits
from .searchsettings import SearchSettings
from .serviceslimits import ServicesLimits
from .upgradegroupsettings import UpgradeGroupSettings
from .upgradesettings import UpgradeSettings
from cribl import utils
from dataclasses_json import Undefined, dataclass_json
from typing import Optional


@dataclasses.dataclass
class Headers:
    pass


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Ssl:
    cert_path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('certPath') }})
    disabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disabled') }})
    passphrase: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passphrase') }})
    priv_key_path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privKeyPath') }})
    ca_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caPath'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class API:
    disabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disabled') }})
    host: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host') }})
    port: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('port') }})
    ssl: Ssl = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssl') }})
    worker_remote_access: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workerRemoteAccess') }})
    base_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('baseUrl'), 'exclude': lambda f: f is None }})
    disable_api_cache: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disableApiCache'), 'exclude': lambda f: f is None }})
    headers: Optional[Headers] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headers'), 'exclude': lambda f: f is None }})
    idle_session_ttl: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idleSessionTTL'), 'exclude': lambda f: f is None }})
    login_rate_limit: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loginRateLimit'), 'exclude': lambda f: f is None }})
    sso_rate_limit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssoRateLimit'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Backups:
    backup_persistence: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backupPersistence') }})
    backups_directory: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backupsDirectory') }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CustomLogo:
    enabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled') }})
    logo_description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logoDescription') }})
    logo_image: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logoImage') }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Distributed:
    mode: AppMode = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mode') }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Proxy:
    use_env_vars: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useEnvVars') }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Rollback:
    rollback_enabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rollbackEnabled') }})
    rollback_retries: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rollbackRetries'), 'exclude': lambda f: f is None }})
    rollback_timeout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rollbackTimeout'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Shutdown:
    drain_timeout: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('drainTimeout') }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class System:
    intercom: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('intercom') }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SystemSettingsTLS:
    default_cipher_list: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultCipherList') }})
    default_ecdh_curve: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultEcdhCurve') }})
    max_version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxVersion') }})
    min_version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minVersion') }})
    reject_unauthorized: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rejectUnauthorized') }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SystemSettingsWorkers:
    count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count') }})
    memory: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memory') }})
    minimum: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimum') }})
    load_throttle_perc: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loadThrottlePerc'), 'exclude': lambda f: f is None }})
    startup_max_conns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startupMaxConns'), 'exclude': lambda f: f is None }})
    startup_throttle_timeout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startupThrottleTimeout'), 'exclude': lambda f: f is None }})
    v8_single_thread: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('v8SingleThread'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SystemSettings:
    api: API = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('api') }})
    auth: AuthConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auth') }})
    backups: Backups = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backups') }})
    custom_logo: CustomLogo = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customLogo') }})
    distributed: Distributed = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distributed') }})
    git: GitSettings = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('git') }})
    job_limits: JobSettings = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobLimits') }})
    limits: Limits = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limits') }})
    proxy: Proxy = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('proxy') }})
    redis_cache_limits: RedisCacheLimits = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redisCacheLimits') }})
    rollback: Rollback = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rollback') }})
    search_limits: SearchSettings = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('searchLimits') }})
    services_limits: ServicesLimits = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('servicesLimits') }})
    shutdown: Shutdown = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shutdown') }})
    system: System = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system') }})
    tls: SystemSettingsTLS = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tls') }})
    upgrade_group_settings: UpgradeGroupSettings = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upgradeGroupSettings') }})
    upgrade_settings: UpgradeSettings = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upgradeSettings') }})
    workers: SystemSettingsWorkers = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workers') }})
    

