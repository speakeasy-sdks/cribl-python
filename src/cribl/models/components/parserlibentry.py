"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from cribl import utils
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from typing import Any, Dict, Optional

class ParserLibEntryType(str, Enum):
    r"""Parser/Formatter type to use."""
    CSV = 'csv'
    ELFF = 'elff'
    CLF = 'clf'
    KVP = 'kvp'
    JSON = 'json'
    DELIM = 'delim'
    REGEX = 'regex'
    GROK = 'grok'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ParserLibEntry:
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Brief description of this parser. Optional."""
    lib: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lib'), 'exclude': lambda f: f is None }})
    tags: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""One or more tags related to this parser. Optional."""
    type: Optional[ParserLibEntryType] = dataclasses.field(default=ParserLibEntryType.CSV, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Parser/Formatter type to use."""
    

