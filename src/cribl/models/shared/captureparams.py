"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from cribl import utils
from dataclasses_json import Undefined, dataclass_json
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class CaptureParams:
    r"""CaptureParams object"""
    filter: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filter') }})
    level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('level') }})
    max_events: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxEvents') }})
    step_duration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stepDuration'), 'exclude': lambda f: f is None }})
    worker_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workerId'), 'exclude': lambda f: f is None }})
    worker_threshold: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workerThreshold'), 'exclude': lambda f: f is None }})
    

