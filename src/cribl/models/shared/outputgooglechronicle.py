"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from cribl import utils
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from typing import Optional

class OutputGoogleChronicleAuthenticationMethod(str, Enum):
    SECRET = 'secret'
    MANUAL = 'manual'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class OutputGoogleChronicleExtraHTTPHeaders:
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""Field value"""
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Field name"""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class OutputGoogleChronicleExtraLogTypes:
    log_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logType') }})
    r"""Log type"""
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Log type description"""
    


class OutputGoogleChronicleFailedRequestLoggingMode(str, Enum):
    r"""Determines which data should be logged when a request fails. Defaults to None.  All headers are redacted by default, except those listed under `Safe Headers`."""
    PAYLOAD = 'payload'
    PAYLOAD_AND_HEADERS = 'payloadAndHeaders'
    NONE = 'none'

class OutputGoogleChronicleSendEventsAs(str, Enum):
    UNSTRUCTURED = 'unstructured'
    UDM = 'udm'

class OutputGoogleChronicleDefaultLogType(str, Enum):
    r"""Default log type value to send to Chronicle. Can be overwritten by event field __logType."""
    ONEPASSWORD = 'ONEPASSWORD'
    ABNORMAL_SECURITY = 'ABNORMAL_SECURITY'
    ABSOLUTE = 'ABSOLUTE'
    ACALVIO = 'ACALVIO'
    ACCELLION = 'ACCELLION'
    ACQUIA_CLOUD_PLATFORM = 'ACQUIA_CLOUD_PLATFORM'
    AI_HUNTER = 'AI_HUNTER'
    ADTRAN_NETVANTA = 'ADTRAN_NETVANTA'
    AIRLOCK_DIGITAL = 'AIRLOCK_DIGITAL'
    AIX_SYSTEM = 'AIX_SYSTEM'
    AKAMAI_CLOUD_MONITOR = 'AKAMAI_CLOUD_MONITOR'
    AKAMAI_DHCP = 'AKAMAI_DHCP'
    AKAMAI_DNS = 'AKAMAI_DNS'
    AKAMAI_EAA = 'AKAMAI_EAA'
    AKAMAI_ETP = 'AKAMAI_ETP'
    AKAMAI_DDOS = 'AKAMAI_DDOS'
    AKAMAI_SIEM_CONNECTOR = 'AKAMAI_SIEM_CONNECTOR'
    AKAMAI_WAF = 'AKAMAI_WAF'
    AKEYLESS_VAULT = 'AKEYLESS_VAULT'
    ALERTLOGIC_NOTIFICATIONS = 'ALERTLOGIC_NOTIFICATIONS'
    ALGOSEC = 'ALGOSEC'
    ALLOT_NETENFORCER = 'ALLOT_NETENFORCER'
    ASOC_ALERT = 'ASOC_ALERT'
    ALVEO_RDM = 'ALVEO_RDM'
    ANOMALI_IOC = 'ANOMALI_IOC'
    ANSIBLE_AWX = 'ANSIBLE_AWX'
    APACHE = 'APACHE'
    CASSANDRA = 'CASSANDRA'
    HADOOP = 'HADOOP'
    APACHE_KAFKA_AUDIT = 'APACHE_KAFKA_AUDIT'
    APACHE_SPAMASSASSIN = 'APACHE_SPAMASSASSIN'
    TOMCAT = 'TOMCAT'
    APC_SMART_UPS = 'APC_SMART_UPS'
    APC_STRUXUREWARE = 'APC_STRUXUREWARE'
    APPGATE_SDP = 'APPGATE_SDP'
    APPIAN_CLOUD = 'APPIAN_CLOUD'
    MACOS = 'MACOS'
    APPOMNI = 'APPOMNI'
    APTOS_EOM = 'APTOS_EOM'
    AQUA_SECURITY = 'AQUA_SECURITY'
    ARCHER_IRM = 'ARCHER_IRM'
    ARCSIGHT_CEF = 'ARCSIGHT_CEF'
    AREA1 = 'AREA1'
    ARGO_CD = 'ARGO_CD'
    ARISTA_SWITCH = 'ARISTA_SWITCH'
    ARKIME_PCAP = 'ARKIME_PCAP'
    ARMIS = 'ARMIS'
    ARMOR_ANYWHERE = 'ARMOR_ANYWHERE'
    ARRAYNETWORKS_VPN = 'ARRAYNETWORKS_VPN'
    ARRAY_NETWORKS_WAF = 'ARRAY_NETWORKS_WAF'
    ARUBA_WIRELESS = 'ARUBA_WIRELESS'
    ARUBA_AIRWAVE = 'ARUBA_AIRWAVE'
    ARUBA_IPS = 'ARUBA_IPS'
    ARXAN_THREAT_ANALYTICS = 'ARXAN_THREAT_ANALYTICS'
    ATT_NETBOND = 'ATT_NETBOND'
    ATLASSIAN_CONFLUENCE = 'ATLASSIAN_CONFLUENCE'
    ATLASSIAN_JIRA = 'ATLASSIAN_JIRA'
    ATTIVO = 'ATTIVO'
    AUTH_ZERO = 'AUTH_ZERO'
    AUTHENTIC8_SILO = 'AUTHENTIC8_SILO'
    AUTHX = 'AUTHX'
    AUTHX_USER_CONTEXT = 'AUTHX_USER_CONTEXT'
    AUTOMATION_ANYWHERE = 'AUTOMATION_ANYWHERE'
    AUTOMOX_EPM = 'AUTOMOX_EPM'
    AVANAN_EMAIL = 'AVANAN_EMAIL'
    AVATIER = 'AVATIER'
    AVAYA_AURA = 'AVAYA_AURA'
    AVAYA_IVR = 'AVAYA_IVR'
    AVAYA_WIRELESS = 'AVAYA_WIRELESS'
    AVIATRIX = 'AVIATRIX'
    AWAKE_NDR = 'AWAKE_NDR'
    AWS_AURORA = 'AWS_AURORA'
    AWS_CLOUDFRONT = 'AWS_CLOUDFRONT'
    AWS_CLOUDTRAIL = 'AWS_CLOUDTRAIL'
    AWS_CLOUDWATCH = 'AWS_CLOUDWATCH'
    AWS_CONFIG = 'AWS_CONFIG'
    AWS_CONTROL_TOWER = 'AWS_CONTROL_TOWER'
    AWS_ELB = 'AWS_ELB'
    GUARDDUTY = 'GUARDDUTY'
    AWS_KMS = 'AWS_KMS'
    AWS_MACIE = 'AWS_MACIE'
    AWS_REDSHIFT = 'AWS_REDSHIFT'
    AWS_ROUTE_53 = 'AWS_ROUTE_53'
    AWS_S3_SERVER_ACCESS = 'AWS_S3_SERVER_ACCESS'
    AWS_SECURITY_HUB = 'AWS_SECURITY_HUB'
    AWS_SESSION_MANAGER = 'AWS_SESSION_MANAGER'
    AWS_SES = 'AWS_SES'
    AWS_VPC_FLOW = 'AWS_VPC_FLOW'
    AWS_WAF = 'AWS_WAF'
    AXIS_OS = 'AXIS_OS'
    AXONIUS = 'AXONIUS'
    AZURE_AD = 'AZURE_AD'
    AZURE_AD_AUDIT = 'AZURE_AD_AUDIT'
    AZURE_AD_CONTEXT = 'AZURE_AD_CONTEXT'
    AZURE_ATP = 'AZURE_ATP'
    AZURE_COSMOS_DB = 'AZURE_COSMOS_DB'
    AZURE_DEVOPS = 'AZURE_DEVOPS'
    AZURE_FIREWALL = 'AZURE_FIREWALL'
    AZURE_SECURITY_CENTER = 'AZURE_SECURITY_CENTER'
    AZURE_SQL = 'AZURE_SQL'
    AZURE_WAF = 'AZURE_WAF'
    BARRACUDA_CLOUDGEN_ACCESS = 'BARRACUDA_CLOUDGEN_ACCESS'
    BARRACUDA_EMAIL = 'BARRACUDA_EMAIL'
    BARRACUDA_FIREWALL = 'BARRACUDA_FIREWALL'
    BARRACUDA_WAF = 'BARRACUDA_WAF'
    BETTERCLOUD = 'BETTERCLOUD'
    BOMGAR = 'BOMGAR'
    BEYONDTRUST_BEYONDINSIGHT = 'BEYONDTRUST_BEYONDINSIGHT'
    BEYONDTRUST_CPB = 'BEYONDTRUST_CPB'
    BEYONDTRUST_ENDPOINT = 'BEYONDTRUST_ENDPOINT'
    BEYONDTRUST_PI = 'BEYONDTRUST_PI'
    BEYONDTRUST_REMOTE_ACCESS = 'BEYONDTRUST_REMOTE_ACCESS'
    BIGSWITCH_BCF = 'BIGSWITCH_BCF'
    BIND_DNS = 'BIND_DNS'
    BITDEFENDER = 'BITDEFENDER'
    BLUECOAT_WEBPROXY = 'BLUECOAT_WEBPROXY'
    BLUE_PRISM = 'BLUE_PRISM'
    BLUECAT_DDI = 'BLUECAT_DDI'
    BLUECAT_EDGE = 'BLUECAT_EDGE'
    BMC_AMI_DEFENDER = 'BMC_AMI_DEFENDER'
    BMC_CONTROL_M = 'BMC_CONTROL_M'
    BMC_HELIX_DISCOVERY = 'BMC_HELIX_DISCOVERY'
    BOX = 'BOX'
    BRICATA_NDR = 'BRICATA_NDR'
    BRIVO = 'BRIVO'
    BROADCOM_CEM = 'BROADCOM_CEM'
    BROADCOM_SSL_VA = 'BROADCOM_SSL_VA'
    BROCADE_SERVERIRON = 'BROCADE_SERVERIRON'
    BROCADE_SWITCH = 'BROCADE_SWITCH'
    BT_IPCONTROL = 'BT_IPCONTROL'
    CA_ACCESS_CONTROL = 'CA_ACCESS_CONTROL'
    CA_ACF2 = 'CA_ACF2'
    CA_LDAP = 'CA_LDAP'
    CAMEYO_BYO_CLOUD = 'CAMEYO_BYO_CLOUD'
    CB_EDR = 'CB_EDR'
    CB_APP_CONTROL = 'CB_APP_CONTROL'
    CATO_NETWORKS = 'CATO_NETWORKS'
    CATO_SDWAN = 'CATO_SDWAN'
    CENTRIFY_SSO = 'CENTRIFY_SSO'
    CENTRIPETAL_IOC = 'CENTRIPETAL_IOC'
    CEQUENCE_BOT_DEFENSE = 'CEQUENCE_BOT_DEFENSE'
    CERBERUS_FTP = 'CERBERUS_FTP'
    CHECKPOINT_FIREWALL = 'CHECKPOINT_FIREWALL'
    CHECKPOINT_CLOUDGUARD = 'CHECKPOINT_CLOUDGUARD'
    CHECKPOINT_EMAIL = 'CHECKPOINT_EMAIL'
    CHECKPOINT_HARMONY = 'CHECKPOINT_HARMONY'
    CHECKPOINT_EDR = 'CHECKPOINT_EDR'
    CIRCLECI = 'CIRCLECI'
    CIS_ALBERT_ALERT = 'CIS_ALBERT_ALERT'
    CISCO_ACS = 'CISCO_ACS'
    CISCO_AMP = 'CISCO_AMP'
    CISCO_APIC = 'CISCO_APIC'
    CISCO_ACI = 'CISCO_ACI'
    CISCO_ACE = 'CISCO_ACE'
    CISCO_ASA_FIREWALL = 'CISCO_ASA_FIREWALL'
    CISCO_CLOUDLOCK_CASB = 'CISCO_CLOUDLOCK_CASB'
    CISCO_SMA = 'CISCO_SMA'
    CISCO_CTS = 'CISCO_CTS'
    CISCO_DHCP = 'CISCO_DHCP'
    CISCO_DNAC = 'CISCO_DNAC'
    CISCO_DNS = 'CISCO_DNS'
    CISCO_EMAIL_SECURITY = 'CISCO_EMAIL_SECURITY'
    CISCO_FIREPOWER_FIREWALL = 'CISCO_FIREPOWER_FIREWALL'
    CISCO_FIRESIGHT = 'CISCO_FIRESIGHT'
    CISCO_IOS = 'CISCO_IOS'
    CISCO_ISE = 'CISCO_ISE'
    CISCO_MERAKI = 'CISCO_MERAKI'
    CISCO_NX_OS = 'CISCO_NX_OS'
    CISCO_PRIME = 'CISCO_PRIME'
    CISCO_ROUTER = 'CISCO_ROUTER'
    CISCO_SECURE_MALWARE_ANALYTICS = 'CISCO_SECURE_MALWARE_ANALYTICS'
    CISCO_SECURE_WORKLOAD = 'CISCO_SECURE_WORKLOAD'
    CISCO_STEALTHWATCH = 'CISCO_STEALTHWATCH'
    CISCO_SWITCH = 'CISCO_SWITCH'
    CISCO_TACACS = 'CISCO_TACACS'
    CISCO_UCM = 'CISCO_UCM'
    CISCO_UCS = 'CISCO_UCS'
    UMBRELLA_FIREWALL = 'UMBRELLA_FIREWALL'
    UMBRELLA_DNS = 'UMBRELLA_DNS'
    UMBRELLA_IP = 'UMBRELLA_IP'
    UMBRELLA_WEBPROXY = 'UMBRELLA_WEBPROXY'
    CISCO_VCS = 'CISCO_VCS'
    CISCO_SDWAN = 'CISCO_SDWAN'
    CISCO_VPN = 'CISCO_VPN'
    CISCO_WIPS = 'CISCO_WIPS'
    CISCO_WIRELESS = 'CISCO_WIRELESS'
    CISCO_WSA = 'CISCO_WSA'
    CITRIX_ANALYTICS = 'CITRIX_ANALYTICS'
    CITRIX_MONITOR = 'CITRIX_MONITOR'
    CITRIX_NETSCALER = 'CITRIX_NETSCALER'
    CITRIX_NETSCALER_WEB_LOGS = 'CITRIX_NETSCALER_WEB_LOGS'
    CITRIX_SDWAN = 'CITRIX_SDWAN'
    CITRIX_STOREFRONT = 'CITRIX_STOREFRONT'
    CITRIX_WEB_GATEWAY = 'CITRIX_WEB_GATEWAY'
    CITRIX_WORKSPACE = 'CITRIX_WORKSPACE'
    CITRIX_XENCENTER = 'CITRIX_XENCENTER'
    CLAM_AV = 'CLAM_AV'
    CLEARSENSE = 'CLEARSENSE'
    CLICK_STUDIOS_PASSWORDSTATE = 'CLICK_STUDIOS_PASSWORDSTATE'
    CLOUD_PASSAGE = 'CLOUD_PASSAGE'
    CLOUDPASSAGE_CSM = 'CLOUDPASSAGE_CSM'
    CLOUDPASSAGE_FIM = 'CLOUDPASSAGE_FIM'
    CLOUDPASSAGE_LIDS = 'CLOUDPASSAGE_LIDS'
    CLOUDPASSAGE_SVM = 'CLOUDPASSAGE_SVM'
    CLOUDFLARE = 'CLOUDFLARE'
    CLOUDFLARE_AUDIT = 'CLOUDFLARE_AUDIT'
    CLOUDFLARE_BOT_MANAGEMENT = 'CLOUDFLARE_BOT_MANAGEMENT'
    CLOUDFLARE_WAF = 'CLOUDFLARE_WAF'
    CLOUDGENIX_SDWAN = 'CLOUDGENIX_SDWAN'
    CLOUDIAN_HYPERSTORE = 'CLOUDIAN_HYPERSTORE'
    CLOUDM = 'CLOUDM'
    CMD = 'CMD'
    CODE_WORLDWIDE = 'CODE_WORLDWIDE'
    CODE42 = 'CODE42'
    CODE42_INCYDR = 'CODE42_INCYDR'
    COFENSE_TRIAGE = 'COFENSE_TRIAGE'
    COFENSE_VISION = 'COFENSE_VISION'
    COHESITY = 'COHESITY'
    COMMVAULT = 'COMMVAULT'
    COMODO_AV = 'COMODO_AV'
    CONFLUENT_AUDIT = 'CONFLUENT_AUDIT'
    CONNECTWISE_CONTROL = 'CONNECTWISE_CONTROL'
    CORELIGHT = 'CORELIGHT'
    ENDPOINT_PROTECTOR_DLP = 'ENDPOINT_PROTECTOR_DLP'
    COVID_CTC_IOC = 'COVID_CTC_IOC'
    CRADLEPOINT_NETCLOUD = 'CRADLEPOINT_NETCLOUD'
    CS_DETECTS = 'CS_DETECTS'
    CS_EDR = 'CS_EDR'
    CS_CEF_EDR = 'CS_CEF_EDR'
    CS_STREAM = 'CS_STREAM'
    CROWDSTRIKE_IOC = 'CROWDSTRIKE_IOC'
    CSV_CUSTOM_CMDB = 'CSV_CUSTOM_CMDB'
    CSV_CUSTOM_IOC = 'CSV_CUSTOM_IOC'
    CTERA_DRIVE = 'CTERA_DRIVE'
    DEFAULT_CUSTOM_LOG_TYPE = 'DefaultCustomLogType'
    CUSTOM_APPLICATION_ACCESS = 'CUSTOM_APPLICATION_ACCESS'
    CUSTOM_DNS = 'CUSTOM_DNS'
    CUSTOM_HOST_FORENSICS = 'CUSTOM_HOST_FORENSICS'
    CUSTOM_SECURITY_DATA_ANALYTICS = 'CUSTOM_SECURITY_DATA_ANALYTICS'
    CUSTOMER_ALERT = 'CUSTOMER_ALERT'
    E2_SOLUTIONS = 'E2_SOLUTIONS'
    CYBERARK = 'CYBERARK'
    CYBEREASON_EDR = 'CYBEREASON_EDR'
    CYBERHAVEN_DDR = 'CYBERHAVEN_DDR'
    CYCODE = 'CYCODE'
    CYLANCE = 'CYLANCE'
    CYLANCE_PROTECT = 'CYLANCE_PROTECT'
    CYOLO_ZTNA = 'CYOLO_ZTNA'
    D3_BANKING = 'D3_BANKING'
    D3_SECURITY = 'D3_SECURITY'
    DARKTRACE = 'DARKTRACE'
    DATADOG = 'DATADOG'
    DATALOCKER_SAFECONSOLE = 'DATALOCKER_SAFECONSOLE'
    DATAWATCH = 'DATAWATCH'
    DATTO_FILE_PROTECTION = 'DATTO_FILE_PROTECTION'
    DEEP_INSTINCT_EDR = 'DEEP_INSTINCT_EDR'
    DEEPFENCE = 'DEEPFENCE'
    DELINEA_PRIVILEGE_MANAGER = 'DELINEA_PRIVILEGE_MANAGER'
    DELINEA_SECRET_SERVER = 'DELINEA_SECRET_SERVER'
    DELINEA_SERVER_SUITE = 'DELINEA_SERVER_SUITE'
    DELL_EMC_AVAMAR = 'DELL_EMC_AVAMAR'
    DELL_EMC_CLOUDLINK = 'DELL_EMC_CLOUDLINK'
    DELL_EMC_DATA_DOMAIN = 'DELL_EMC_DATA_DOMAIN'
    DELL_EMC_NAS = 'DELL_EMC_NAS'
    IDRAC = 'IDRAC'
    DELL_OPENMANAGE = 'DELL_OPENMANAGE'
    DELL_SWITCH = 'DELL_SWITCH'
    DHS_IOC = 'DHS_IOC'
    DESIGN_PROFIT_CENTRAL_SERVER = 'DESIGN_PROFIT_CENTRAL_SERVER'
    FRONTLINE_VM = 'FRONTLINE_VM'
    DIGITALGUARDIAN_DLP = 'DIGITALGUARDIAN_DLP'
    DIGITALGUARDIAN_EDR = 'DIGITALGUARDIAN_EDR'
    DIGITAL_SHADOWS_IOC = 'DIGITAL_SHADOWS_IOC'
    DIGITAL_SHADOWS_SEARCHLIGHT = 'DIGITAL_SHADOWS_SEARCHLIGHT'
    DIGITALARTS_IFILTER = 'DIGITALARTS_IFILTER'
    DMP_ENTRE = 'DMP_ENTRE'
    DOCKER = 'DOCKER'
    PHISHEYE_ALERT = 'PHISHEYE_ALERT'
    DOMO = 'DOMO'
    DREMIO_DATA_LAKEHOUSE = 'DREMIO_DATA_LAKEHOUSE'
    DROPBOX = 'DROPBOX'
    DUO_CASB = 'DUO_CASB'
    DUO_ADMIN = 'DUO_ADMIN'
    DUO_AUTH = 'DUO_AUTH'
    DUO_CONTEXT = 'DUO_CONTEXT'
    DUO_NETWORK_GATEWAY = 'DUO_NETWORK_GATEWAY'
    DUO_TELEPHONY = 'DUO_TELEPHONY'
    DUO_USER_CONTEXT = 'DUO_USER_CONTEXT'
    DYNATRACE = 'DYNATRACE'
    ESHARE_PLATFORM = 'ESHARE_PLATFORM'
    EATON_UPS = 'EATON_UPS'
    ECAR = 'ECAR'
    ECAR_BRO = 'ECAR_BRO'
    EIQ_EDR = 'EIQ_EDR'
    EFFICIENTIP_DDI = 'EFFICIENTIP_DDI'
    ELASTIC_AUDITBEAT = 'ELASTIC_AUDITBEAT'
    ELASTIC_FILEBEAT = 'ELASTIC_FILEBEAT'
    ELASTIC_METRICBEAT = 'ELASTIC_METRICBEAT'
    ELASTIC_PACKETBEATS = 'ELASTIC_PACKETBEATS'
    ELASTIC_SEARCH = 'ELASTIC_SEARCH'
    ELASTIC_WINLOGBEAT = 'ELASTIC_WINLOGBEAT'
    ET_PRO_IOC = 'ET_PRO_IOC'
    EMERSON_FIREWALL = 'EMERSON_FIREWALL'
    ENDGAME_EDR = 'ENDGAME_EDR'
    ENTRUST_HSM = 'ENTRUST_HSM'
    ENTRUST_NTP_SERVER = 'ENTRUST_NTP_SERVER'
    ENTRUST_SECRETS_VAULT = 'ENTRUST_SECRETS_VAULT'
    EPIC = 'EPIC'
    ESET_EDR = 'ESET_EDR'
    ESET_AV = 'ESET_AV'
    ESET_IOC = 'ESET_IOC'
    ESTAR = 'ESTAR'
    ETQ_RELIANCE = 'ETQ_RELIANCE'
    EXABEAM_FUSION_XDR = 'EXABEAM_FUSION_XDR'
    EXTRAHOP_DHCP = 'EXTRAHOP_DHCP'
    EXTRAHOP_DNS = 'EXTRAHOP_DNS'
    EXTRAHOP = 'EXTRAHOP'
    AIRDEFENSE = 'AIRDEFENSE'
    EXTREME_SWITCH = 'EXTREME_SWITCH'
    F5_ASM = 'F5_ASM'
    F5_BIGIP_LTM = 'F5_BIGIP_LTM'
    F5_BOT = 'F5_BOT'
    F5_DNS = 'F5_DNS'
    F5_SHAPE = 'F5_SHAPE'
    F5_VPN = 'F5_VPN'
    FALCO_IDS = 'FALCO_IDS'
    FASTLY_WAF = 'FASTLY_WAF'
    FIDELIS_ENDPOINT = 'FIDELIS_ENDPOINT'
    FIDELIS_NETWORK = 'FIDELIS_NETWORK'
    FILE_SCANNING_FRAMEWORK = 'FILE_SCANNING_FRAMEWORK'
    FILEZILLA_FTP = 'FILEZILLA_FTP'
    FIREEYE_ALERT = 'FIREEYE_ALERT'
    FIREEYE_EMPS = 'FIREEYE_EMPS'
    FIREEYE_ETP = 'FIREEYE_ETP'
    FIREEYE_HX = 'FIREEYE_HX'
    FIREEYE_NX = 'FIREEYE_NX'
    FIREMON_FIREWALL = 'FIREMON_FIREWALL'
    FLASHPOINT_IOC = 'FLASHPOINT_IOC'
    FLUENTD = 'FLUENTD'
    FORCEPOINT_FIREWALL = 'FORCEPOINT_FIREWALL'
    FORCEPOINT_CASB = 'FORCEPOINT_CASB'
    FORCEPOINT_DLP = 'FORCEPOINT_DLP'
    FORCEPOINT_WEBPROXY = 'FORCEPOINT_WEBPROXY'
    FORESCOUT_NAC = 'FORESCOUT_NAC'
    OPENAM = 'OPENAM'
    OPENDJ = 'OPENDJ'
    FORSETI = 'FORSETI'
    FORTANIX_DSM = 'FORTANIX_DSM'
    FORTINET_FIREWALL = 'FORTINET_FIREWALL'
    FORTINET_DHCP = 'FORTINET_DHCP'
    FORTINET_FORTIANALYZER = 'FORTINET_FORTIANALYZER'
    FORTINET_FORTIAUTHENTICATOR = 'FORTINET_FORTIAUTHENTICATOR'
    FORTINET_FORTICLIENT = 'FORTINET_FORTICLIENT'
    FORTINET_FORTIEDR = 'FORTINET_FORTIEDR'
    FORTINET_FORTINAC = 'FORTINET_FORTINAC'
    FORTINET_SANDBOX = 'FORTINET_SANDBOX'
    FORTINET_WEBPROXY = 'FORTINET_WEBPROXY'
    FOX_IT_STIX = 'FOX_IT_STIX'
    FREEIPA = 'FREEIPA'
    FREERADIUS = 'FREERADIUS'
    FUTUREX_HSM = 'FUTUREX_HSM'
    GCP_APIGEE = 'GCP_APIGEE'
    GCP_CLOUDIDENTITY_DEVICEUSERS = 'GCP_CLOUDIDENTITY_DEVICEUSERS'
    GCP_CLOUDIDENTITY_DEVICES = 'GCP_CLOUDIDENTITY_DEVICES'
    GCP_CLOUDIOT = 'GCP_CLOUDIOT'
    GCP_CLOUD_NAT = 'GCP_CLOUD_NAT'
    GCP_RUN = 'GCP_RUN'
    GCP_CLOUDSQL = 'GCP_CLOUDSQL'
    GCP_COMPUTE = 'GCP_COMPUTE'
    GCP_CSCC = 'GCP_CSCC'
    GCP_DNS = 'GCP_DNS'
    GCP_FIREWALL = 'GCP_FIREWALL'
    GCP_IDS = 'GCP_IDS'
    GCP_LOADBALANCING = 'GCP_LOADBALANCING'
    GCP_THREAT_DETECTION = 'GCP_THREAT_DETECTION'
    GCP_VPC_FLOW = 'GCP_VPC_FLOW'
    GIGAMON = 'GIGAMON'
    GITHUB = 'GITHUB'
    GITLAB = 'GITLAB'
    GLOBALSCAPE_SFTP = 'GLOBALSCAPE_SFTP'
    GLUSTER_FS = 'GLUSTER_FS'
    GMAIL_LOGS = 'GMAIL_LOGS'
    GMV_CHECKER = 'GMV_CHECKER'
    GMV_CHECKER_CONTEXT = 'GMV_CHECKER_CONTEXT'
    GODADDY_DNS = 'GODADDY_DNS'
    CLOUD_IDENTITY_CONTEXT = 'CLOUD_IDENTITY_CONTEXT'
    GCP = 'GCP'
    GREATHORN = 'GREATHORN'
    GSUITE_ADMIN = 'GSUITE_ADMIN'
    GSUITE_AUDIT = 'GSUITE_AUDIT'
    GTB_DLP = 'GTB_DLP'
    GUARDICORE_CENTRA = 'GUARDICORE_CENTRA'
    H3_C_SWITCH = 'H3C_SWITCH'
    HAPROXY = 'HAPROXY'
    HAPROXY_LOADBALANCER = 'HAPROXY_LOADBALANCER'
    HASHICORP = 'HASHICORP'
    HCL_BIGFIX = 'HCL_BIGFIX'
    HCNET_ACCOUNT_ADAPTER = 'HCNET_ACCOUNT_ADAPTER'
    HIRSCHMANN_SWITCH = 'HIRSCHMANN_SWITCH'
    HITACHI_CLOUD_PLATFORM = 'HITACHI_CLOUD_PLATFORM'
    HITACHI_ID_PAM = 'HITACHI_ID_PAM'
    HONEYD = 'HONEYD'
    PROWATCH = 'PROWATCH'
    CLEARPASS = 'CLEARPASS'
    HP_PRINTER = 'HP_PRINTER'
    HP_PROCURVE = 'HP_PROCURVE'
    HPE_ILO = 'HPE_ILO'
    HYPR_MFA = 'HYPR_MFA'
    IBM_AS400 = 'IBM_AS400'
    IBM_CICS = 'IBM_CICS'
    IBM_DATAPOWER = 'IBM_DATAPOWER'
    DB2_DB = 'DB2_DB'
    GUARDIUM = 'GUARDIUM'
    INFORMIX = 'INFORMIX'
    JDE = 'JDE'
    IBM_MAAS360 = 'IBM_MAAS360'
    IBM_MQ_FILE_TRANSFER = 'IBM_MQ_FILE_TRANSFER'
    IBM_SAFENET = 'IBM_SAFENET'
    IBM_QRADAR = 'IBM_QRADAR'
    IBM_SECURITY_VERIFY = 'IBM_SECURITY_VERIFY'
    IBM_SPECTRUM_PROTECT = 'IBM_SPECTRUM_PROTECT'
    IBM_SWITCH = 'IBM_SWITCH'
    IBM_TIVOLI = 'IBM_TIVOLI'
    IBM_WEBSEAL = 'IBM_WEBSEAL'
    IBM_WEBSPHERE_APP_SERVER = 'IBM_WEBSPHERE_APP_SERVER'
    IBM_ZOS = 'IBM_ZOS'
    IBM_ZSECURE_ALERT = 'IBM_ZSECURE_ALERT'
    IBOSS_WEBPROXY = 'IBOSS_WEBPROXY'
    ILLUMIO_CORE = 'ILLUMIO_CORE'
    IMANAGE_CLOUD = 'IMANAGE_CLOUD'
    IMPERVA_WAF = 'IMPERVA_WAF'
    IMPERVA_DB = 'IMPERVA_DB'
    IMPERVA_FLEXPROTECT = 'IMPERVA_FLEXPROTECT'
    IMPERVA_SECURESPHERE = 'IMPERVA_SECURESPHERE'
    IMPERVA_SONAR = 'IMPERVA_SONAR'
    IMPRIVATA_CONFIRM_ID = 'IMPRIVATA_CONFIRM_ID'
    IMPRIVATA_IDG = 'IMPRIVATA_IDG'
    IMPRIVATA_ONESIGN = 'IMPRIVATA_ONESIGN'
    INFOBLOX = 'INFOBLOX'
    INFOBLOX_DHCP = 'INFOBLOX_DHCP'
    INFOBLOX_DNS = 'INFOBLOX_DNS'
    INFOBLOX_LOADBALANCER = 'INFOBLOX_LOADBALANCER'
    INFOBLOX_NETMRI = 'INFOBLOX_NETMRI'
    INFOBLOX_RPZ = 'INFOBLOX_RPZ'
    INTERSYSTEMS_CACHE = 'INTERSYSTEMS_CACHE'
    IPSWITCH_MOVEIT_AUTOMATION = 'IPSWITCH_MOVEIT_AUTOMATION'
    IPSWITCH_MOVEIT_TRANSFER = 'IPSWITCH_MOVEIT_TRANSFER'
    IPSWITCH_SFTP = 'IPSWITCH_SFTP'
    ISC_DHCP = 'ISC_DHCP'
    JAMF = 'JAMF'
    JAMF_COMPLIANCE_REPORTER = 'JAMF_COMPLIANCE_REPORTER'
    JAMF_PROTECT = 'JAMF_PROTECT'
    JENKINS = 'JENKINS'
    JUMPCLOUD_DAAS = 'JUMPCLOUD_DAAS'
    JUNIPER_FIREWALL = 'JUNIPER_FIREWALL'
    JUNIPER_IPS = 'JUNIPER_IPS'
    JUNIPER_JUNOS = 'JUNIPER_JUNOS'
    JUNIPER_MX = 'JUNIPER_MX'
    KAMAILIO = 'KAMAILIO'
    KANDJI = 'KANDJI'
    KASEYA = 'KASEYA'
    KASPERSKY_AV = 'KASPERSKY_AV'
    KEA_DHCP = 'KEA_DHCP'
    KEEPER = 'KEEPER'
    KEMP_LOADBALANCER = 'KEMP_LOADBALANCER'
    KIBANA = 'KIBANA'
    KISI = 'KISI'
    KNOWBE4_PHISHER = 'KNOWBE4_PHISHER'
    KONG_GATEWAY = 'KONG_GATEWAY'
    KUBERNETES_AUDIT = 'KUBERNETES_AUDIT'
    KUBERNETES_AUTH_PROXY = 'KUBERNETES_AUTH_PROXY'
    KUBERNETES_NODE = 'KUBERNETES_NODE'
    KYRIBA = 'KYRIBA'
    LACEWORK = 'LACEWORK'
    LASTPASS = 'LASTPASS'
    SITEMINDER_SSO = 'SITEMINDER_SSO'
    LENEL_ONGUARD = 'LENEL_ONGUARD'
    LEXMARK_PRINTER = 'LEXMARK_PRINTER'
    LIAISON_NUBRIDGES = 'LIAISON_NUBRIDGES'
    LIBRAESVA_EMAIL = 'LIBRAESVA_EMAIL'
    LIMACHARLIE_EDR = 'LIMACHARLIE_EDR'
    AUDITD = 'AUDITD'
    LINUX_DHCP = 'LINUX_DHCP'
    LINUX_SYSMON = 'LINUX_SYSMON'
    LOGICMONITOR = 'LOGICMONITOR'
    LOOKING_GLASS_IOC = 'LOOKING_GLASS_IOC'
    LOOKINGGLASS_IPS = 'LOOKINGGLASS_IPS'
    LSI_BMS = 'LSI_BMS'
    MAILSCANNER = 'MAILSCANNER'
    MALWAREBYTES_EDR = 'MALWAREBYTES_EDR'
    MANAGE_ENGINE_AD360 = 'MANAGE_ENGINE_AD360'
    ADAUDIT_PLUS = 'ADAUDIT_PLUS'
    ADMANAGER_PLUS = 'ADMANAGER_PLUS'
    ADSELFSERVICE_PLUS = 'ADSELFSERVICE_PLUS'
    MANAGE_ENGINE_PASSWORD_MANAGER = 'MANAGE_ENGINE_PASSWORD_MANAGER'
    MANAGE_ENGINE_REPORTER_PLUS = 'MANAGE_ENGINE_REPORTER_PLUS'
    MANGOAPPS = 'MANGOAPPS'
    MARIA_DB = 'MARIA_DB'
    MATERIAL_SECURITY = 'MATERIAL_SECURITY'
    MATRIX_FRONTIER = 'MATRIX_FRONTIER'
    MCAFEE_ATD = 'MCAFEE_ATD'
    MCAFEE_DLP = 'MCAFEE_DLP'
    MCAFEE_ESM = 'MCAFEE_ESM'
    MCAFEE_EPO = 'MCAFEE_EPO'
    MCAFEE_IPS = 'MCAFEE_IPS'
    MCAFEE_MVISION_CASB = 'MCAFEE_MVISION_CASB'
    MCAFEE_EDR = 'MCAFEE_EDR'
    MCAFEE_SKYHIGH_CASB = 'MCAFEE_SKYHIGH_CASB'
    MCAFEE_UCE = 'MCAFEE_UCE'
    MCAFEE_WEBPROXY = 'MCAFEE_WEBPROXY'
    MCAFEE_WEB_PROTECTION = 'MCAFEE_WEB_PROTECTION'
    MEDIGATE_CMDB = 'MEDIGATE_CMDB'
    MEDIGATE_IOT = 'MEDIGATE_IOT'
    MENANDMICE_DNS = 'MENANDMICE_DNS'
    MENLO_SECURITY = 'MENLO_SECURITY'
    MICROSEMI_NTP = 'MICROSEMI_NTP'
    ACTIVE_SYNC = 'ACTIVE_SYNC'
    WINDOWS_AD = 'WINDOWS_AD'
    ADFS = 'ADFS'
    MICROSOFT_ATA = 'MICROSOFT_ATA'
    AZURE = 'AZURE'
    AZURE_ACTIVITY = 'AZURE_ACTIVITY'
    AZURE_NSG_FLOW = 'AZURE_NSG_FLOW'
    AZURE_RESOURCE_LOGS = 'AZURE_RESOURCE_LOGS'
    MICROSOFT_CASB = 'MICROSOFT_CASB'
    MICROSOFT_DEFENDER_ENDPOINT = 'MICROSOFT_DEFENDER_ENDPOINT'
    MICROSOFT_DEFENDER_IDENTITY = 'MICROSOFT_DEFENDER_IDENTITY'
    EXCHANGE_MAIL = 'EXCHANGE_MAIL'
    MICROSOFT_GRAPH_ALERT = 'MICROSOFT_GRAPH_ALERT'
    IIS = 'IIS'
    AZURE_MDM_INTUNE = 'AZURE_MDM_INTUNE'
    MICROSOFT_NETLOGON = 'MICROSOFT_NETLOGON'
    POWERSHELL = 'POWERSHELL'
    MICROSOFT_SECURITY_CENTER_ALERT = 'MICROSOFT_SECURITY_CENTER_ALERT'
    MICROSOFT_SENTINEL = 'MICROSOFT_SENTINEL'
    SHAREPOINT = 'SHAREPOINT'
    MICROSOFT_SQL = 'MICROSOFT_SQL'
    MICROSOFT_SSTP = 'MICROSOFT_SSTP'
    MICROSOFT_SCEP = 'MICROSOFT_SCEP'
    MIMECAST_MAIL = 'MIMECAST_MAIL'
    MIMECAST_WEBPROXY = 'MIMECAST_WEBPROXY'
    MINERVA_AV = 'MINERVA_AV'
    MISP_IOC = 'MISP_IOC'
    MOBILEIRON = 'MOBILEIRON'
    MONGO_DB = 'MONGO_DB'
    MULESOFT = 'MULESOFT'
    MYSQL = 'MYSQL'
    NAGIOS = 'NAGIOS'
    NASUNI_FILE_SERVICES = 'NASUNI_FILE_SERVICES'
    NCC_SCOUTSUITE = 'NCC_SCOUTSUITE'
    NCR_DIGITAL_INSIGHT_FSG = 'NCR_DIGITAL_INSIGHT_FSG'
    NCR_DIGITAL_INSIGHT_GL = 'NCR_DIGITAL_INSIGHT_GL'
    NETAPP_ONTAP = 'NETAPP_ONTAP'
    NETAPP_SAN = 'NETAPP_SAN'
    NETDISCO = 'NETDISCO'
    NETFILTER_IPTABLES = 'NETFILTER_IPTABLES'
    NETIQ_ACCESS_MANAGER = 'NETIQ_ACCESS_MANAGER'
    NETIQ_EDIRECTORY = 'NETIQ_EDIRECTORY'
    NETMOTION = 'NETMOTION'
    ARBOR_EDGE_DEFENSE = 'ARBOR_EDGE_DEFENSE'
    ARBOR_SIGHTLINE = 'ARBOR_SIGHTLINE'
    NETSKOPE_ALERT = 'NETSKOPE_ALERT'
    NETSKOPE_CASB = 'NETSKOPE_CASB'
    NETSKOPE_WEBPROXY = 'NETSKOPE_WEBPROXY'
    NETSURION_PROTECTWISE = 'NETSURION_PROTECTWISE'
    NEW_RELIC = 'NEW_RELIC'
    NGINX = 'NGINX'
    NIMBLE_OS = 'NIMBLE_OS'
    NIST_NVD = 'NIST_NVD'
    VITALQIP = 'VITALQIP'
    NUCLEUS_ASSET = 'NUCLEUS_ASSET'
    NUCLEUS_VULNERABILITY = 'NUCLEUS_VULNERABILITY'
    NUCLEUS_VULNERABILITY_DELTA = 'NUCLEUS_VULNERABILITY_DELTA'
    NUTANIX_FRAME = 'NUTANIX_FRAME'
    NUTANIX_PRISM = 'NUTANIX_PRISM'
    NXLOG_MANAGER = 'NXLOG_MANAGER'
    OBSIDIAN = 'OBSIDIAN'
    OFFICE_365 = 'OFFICE_365'
    OKTA = 'OKTA'
    OKTA_ACCESS_GATEWAY = 'OKTA_ACCESS_GATEWAY'
    OKTA_RADIUS = 'OKTA_RADIUS'
    OKTA_USER_CONTEXT = 'OKTA_USER_CONTEXT'
    ONBASE_CMS = 'ONBASE_CMS'
    ONEIDENTITY_ARS = 'ONEIDENTITY_ARS'
    ONEIDENTITY_CHANGE_AUDITOR = 'ONEIDENTITY_CHANGE_AUDITOR'
    ONEIDENTITY_DEFENDER = 'ONEIDENTITY_DEFENDER'
    ONEIDENTITY_TPAM = 'ONEIDENTITY_TPAM'
    BALABIT = 'BALABIT'
    ONELOGIN_SSO = 'ONELOGIN_SSO'
    ONELOGIN_USER_CONTEXT = 'ONELOGIN_USER_CONTEXT'
    OPENLDAP = 'OPENLDAP'
    OSINT_IOC = 'OSINT_IOC'
    OPENGEAR = 'OPENGEAR'
    OPENPATH = 'OPENPATH'
    OPENSSH = 'OPENSSH'
    OPENTEXT_FAX2_MAIL = 'OPENTEXT_FAX2MAIL'
    OPEN_VPN = 'OPEN_VPN'
    ORACLE_DB = 'ORACLE_DB'
    ORACLE_CLOUD_AUDIT = 'ORACLE_CLOUD_AUDIT'
    ORACLE_WEBLOGIC = 'ORACLE_WEBLOGIC'
    ORCA = 'ORCA'
    ORDR_IOT = 'ORDR_IOT'
    OSCAR_CLAIMS = 'OSCAR_CLAIMS'
    OSIRIUM_PAM = 'OSIRIUM_PAM'
    OSQUERY_EDR = 'OSQUERY_EDR'
    OSSEC = 'OSSEC'
    PACOM_SYSTEMS = 'PACOM_SYSTEMS'
    PAGERDUTY = 'PAGERDUTY'
    CORTEX_XDR = 'CORTEX_XDR'
    PAN_CORTEX_XDR_EVENTS = 'PAN_CORTEX_XDR_EVENTS'
    PAN_FIREWALL = 'PAN_FIREWALL'
    PAN_GLOBAL_PROTECT = 'PAN_GLOBAL_PROTECT'
    PAN_EDR = 'PAN_EDR'
    PAN_XSOAR = 'PAN_XSOAR'
    PAN_CASB = 'PAN_CASB'
    PAN_PRISMA_CLOUD = 'PAN_PRISMA_CLOUD'
    PAN_IOC = 'PAN_IOC'
    PASSIVE_DNS = 'PASSIVE_DNS'
    PENTERA_ASV = 'PENTERA_ASV'
    PEOPLESOFT = 'PEOPLESOFT'
    PEPLINK_LOADBALANCER = 'PEPLINK_LOADBALANCER'
    PEPLINK_ROUTER = 'PEPLINK_ROUTER'
    PEPLINK_SWITCH = 'PEPLINK_SWITCH'
    PERIMETERX_BOT_PROTECTION = 'PERIMETERX_BOT_PROTECTION'
    PFSENSE = 'PFSENSE'
    PING_FEDERATE = 'PING_FEDERATE'
    PING = 'PING'
    PIVOTAL = 'PIVOTAL'
    PLASO = 'PLASO'
    PLIXER_SCRUTINIZER = 'PLIXER_SCRUTINIZER'
    POSTFIX_MAIL = 'POSTFIX_MAIL'
    POWER_DNS = 'POWER_DNS'
    PREEMPT = 'PREEMPT'
    PREEMPT_AUTH = 'PREEMPT_AUTH'
    PREVEIL_ENTERPRISE = 'PREVEIL_ENTERPRISE'
    PROOFID = 'PROOFID'
    PROOFPOINT_CASB = 'PROOFPOINT_CASB'
    PROOFPOINT_MAIL_FILTER = 'PROOFPOINT_MAIL_FILTER'
    OBSERVEIT = 'OBSERVEIT'
    PROOFPOINT_ON_DEMAND = 'PROOFPOINT_ON_DEMAND'
    PROOFPOINT_MAIL = 'PROOFPOINT_MAIL'
    PROOFPOINT_TRAP = 'PROOFPOINT_TRAP'
    PROOFPOINT_WEB_BROWSER_ISOLATION = 'PROOFPOINT_WEB_BROWSER_ISOLATION'
    PROTEGRITY_DEFIANCE = 'PROTEGRITY_DEFIANCE'
    PULSE_SECURE_VPN = 'PULSE_SECURE_VPN'
    PULSE_SECURE_VTM = 'PULSE_SECURE_VTM'
    PUPPET = 'PUPPET'
    PURE_STORAGE = 'PURE_STORAGE'
    QUALYS_CONTINUOUS_MONITORING = 'QUALYS_CONTINUOUS_MONITORING'
    QUALYS_VM = 'QUALYS_VM'
    QUEST_AD = 'QUEST_AD'
    RADWARE_DDOS = 'RADWARE_DDOS'
    RADWARE_FIREWALL = 'RADWARE_FIREWALL'
    RAPID7_NEXPOSE = 'RAPID7_NEXPOSE'
    RAPID7_INSIGHT = 'RAPID7_INSIGHT'
    GCP_RECAPTCHA_ENTERPRISE = 'GCP_RECAPTCHA_ENTERPRISE'
    RECORDED_FUTURE_IOC = 'RECORDED_FUTURE_IOC'
    REDCANARY_EDR = 'REDCANARY_EDR'
    REDCANARY_CLOUD_PROTECTION_RAW = 'REDCANARY_CLOUD_PROTECTION_RAW'
    REDHAT_DIRECTORY_SERVER = 'REDHAT_DIRECTORY_SERVER'
    REDHAT_IM = 'REDHAT_IM'
    REDHAT_KEYCLOAK = 'REDHAT_KEYCLOAK'
    REDHAT_OPENSHIFT = 'REDHAT_OPENSHIFT'
    REDHAT_STACKROX = 'REDHAT_STACKROX'
    REMEDIANT_SECUREONE = 'REMEDIANT_SECUREONE'
    RH_ISAC_IOC = 'RH_ISAC_IOC'
    RIBBON_ANALYTICS_PLATFORM = 'RIBBON_ANALYTICS_PLATFORM'
    RIBBON_SBC = 'RIBBON_SBC'
    RING_CENTRAL = 'RING_CENTRAL'
    RISKIQ_DIGITAL_FOOTPRINT = 'RISKIQ_DIGITAL_FOOTPRINT'
    STEELHEAD = 'STEELHEAD'
    RSA_AUTH_MANAGER = 'RSA_AUTH_MANAGER'
    RSA_NETWITNESS = 'RSA_NETWITNESS'
    RADIUS = 'RADIUS'
    RUBRIK = 'RUBRIK'
    RUBRIK_POLARIS = 'RUBRIK_POLARIS'
    RUCKUS_WIRELESS = 'RUCKUS_WIRELESS'
    RUMBLE_NETWORK_DISCOVERY = 'RUMBLE_NETWORK_DISCOVERY'
    SAFECONNECT_NAC = 'SAFECONNECT_NAC'
    SAILPOINT_IAM = 'SAILPOINT_IAM'
    SALESFORCE = 'SALESFORCE'
    SALESFORCE_CONTEXT = 'SALESFORCE_CONTEXT'
    SAP_C4_C = 'SAP_C4C'
    SAP_HANA = 'SAP_HANA'
    SAP_IDM = 'SAP_IDM'
    SAP_INSURANCE = 'SAP_INSURANCE'
    SAP_SUCCESSFACTORS = 'SAP_SUCCESSFACTORS'
    SAVIYNT_EIP = 'SAVIYNT_EIP'
    SECBERUS = 'SECBERUS'
    SECUREAUTH_SSO = 'SECUREAUTH_SSO'
    SECURELINK = 'SECURELINK'
    SECURITYSCORECARD = 'SECURITYSCORECARD'
    SEMPERIS_ADFR = 'SEMPERIS_ADFR'
    SEMPERIS_DSP = 'SEMPERIS_DSP'
    SENDMAIL = 'SENDMAIL'
    SENTINELONE_ALERT = 'SENTINELONE_ALERT'
    SENTINEL_DV = 'SENTINEL_DV'
    SENTINEL_EDR = 'SENTINEL_EDR'
    SERVICENOW_AUDIT = 'SERVICENOW_AUDIT'
    SERVICENOW_CMDB = 'SERVICENOW_CMDB'
    SERVICENOW_ROLES = 'SERVICENOW_ROLES'
    SERVICENOW_SECURITY = 'SERVICENOW_SECURITY'
    SEVCO_CMDB = 'SEVCO_CMDB'
    SHIBBOLETH_IDP = 'SHIBBOLETH_IDP'
    SHODAN_IO = 'SHODAN_IO'
    SHRUBBERY_TACACS = 'SHRUBBERY_TACACS'
    SIEMENS_SIPASS = 'SIEMENS_SIPASS'
    SIGNAL_SCIENCES_WAF = 'SIGNAL_SCIENCES_WAF'
    SILVERPEAK_FIREWALL = 'SILVERPEAK_FIREWALL'
    SILVERFORT = 'SILVERFORT'
    CA_SSO_WEB = 'CA_SSO_WEB'
    SLACK_AUDIT = 'SLACK_AUDIT'
    SNARE_SOLUTIONS = 'SNARE_SOLUTIONS'
    SNIPE_IT = 'SNIPE_IT'
    SNOOPY_LOGGER = 'SNOOPY_LOGGER'
    SNORT_IDS = 'SNORT_IDS'
    SNOWFLAKE = 'SNOWFLAKE'
    SOFTWARE_HOUSE_ACS = 'SOFTWARE_HOUSE_ACS'
    SOLARIS_SYSTEM = 'SOLARIS_SYSTEM'
    SOLARWINDS_KSS = 'SOLARWINDS_KSS'
    SOLARWINDS_SERV_U = 'SOLARWINDS_SERV_U'
    SONARQUBE = 'SONARQUBE'
    SONIC_FIREWALL = 'SONIC_FIREWALL'
    SOPHOS_AV = 'SOPHOS_AV'
    SOPHOS_CAPSULE8 = 'SOPHOS_CAPSULE8'
    SOPHOS_CENTRAL = 'SOPHOS_CENTRAL'
    SOPHOS_DHCP = 'SOPHOS_DHCP'
    SOPHOS_FIREWALL = 'SOPHOS_FIREWALL'
    SOPHOS_EDR = 'SOPHOS_EDR'
    SOPHOS_UTM = 'SOPHOS_UTM'
    SOURCEFIRE_IDS = 'SOURCEFIRE_IDS'
    SPLUNK_DNS = 'SPLUNK_DNS'
    SPLUNK_PHANTOM = 'SPLUNK_PHANTOM'
    SPLUNK = 'SPLUNK'
    SPYCLOUD = 'SPYCLOUD'
    SQUID_WEBPROXY = 'SQUID_WEBPROXY'
    PCAP_SSL_CLIENT_HELLO = 'PCAP_SSL_CLIENT_HELLO'
    STAIRWELL_INCEPTION = 'STAIRWELL_INCEPTION'
    ASSET_STATIC_IP = 'ASSET_STATIC_IP'
    STEALTHBITS_AUDIT = 'STEALTHBITS_AUDIT'
    STEALTHBITS_DEFEND = 'STEALTHBITS_DEFEND'
    STORMSHIELD_FIREWALL = 'STORMSHIELD_FIREWALL'
    STREAMALERT = 'STREAMALERT'
    STRONGSWAN_VPN = 'STRONGSWAN_VPN'
    SUPERNA_EYEGLASS = 'SUPERNA_EYEGLASS'
    SUREVIEW_SYSTEMS = 'SUREVIEW_SYSTEMS'
    SURICATA_EVE = 'SURICATA_EVE'
    SURICATA_IDS = 'SURICATA_IDS'
    SWIFT_AMH = 'SWIFT_AMH'
    SWIMLANE = 'SWIMLANE'
    SYMANTEC_CASB = 'SYMANTEC_CASB'
    SYMANTEC_DLP = 'SYMANTEC_DLP'
    SYMANTEC_EDR = 'SYMANTEC_EDR'
    SEP = 'SEP'
    SYMANTEC_EVENT_EXPORT = 'SYMANTEC_EVENT_EXPORT'
    SYMANTEC_MAIL = 'SYMANTEC_MAIL'
    SYMANTEC_VIP = 'SYMANTEC_VIP'
    SYMANTEC_WEB_ISOLATION = 'SYMANTEC_WEB_ISOLATION'
    SYMANTEC_WSS = 'SYMANTEC_WSS'
    SYSDIG = 'SYSDIG'
    TANIUM_ASSET = 'TANIUM_ASSET'
    TANIUM_AUDIT = 'TANIUM_AUDIT'
    TANIUM_COMPLY = 'TANIUM_COMPLY'
    TANIUM_DEPLOY = 'TANIUM_DEPLOY'
    TANIUM_DISCOVER = 'TANIUM_DISCOVER'
    TANIUM_INSIGHT = 'TANIUM_INSIGHT'
    TANIUM_INTEGRITY_MONITOR = 'TANIUM_INTEGRITY_MONITOR'
    TANIUM_PATCH = 'TANIUM_PATCH'
    TANIUM_QUESTION = 'TANIUM_QUESTION'
    TANIUM_REVEAL = 'TANIUM_REVEAL'
    TANIUM_TH = 'TANIUM_TH'
    TANIUM_THREAT_RESPONSE = 'TANIUM_THREAT_RESPONSE'
    TCPWAVE_DDI = 'TCPWAVE_DDI'
    TEAMVIEWER = 'TEAMVIEWER'
    TELEPORT_ACCESS_PLANE = 'TELEPORT_ACCESS_PLANE'
    TENABLE_SC = 'TENABLE_SC'
    TENABLE_IO = 'TENABLE_IO'
    TERRAFORM_ENTERPRISE = 'TERRAFORM_ENTERPRISE'
    TESSIAN_PLATFORM = 'TESSIAN_PLATFORM'
    TGDETECT = 'TGDETECT'
    THALES_DIS = 'THALES_DIS'
    THALES_LUNA_HSM = 'THALES_LUNA_HSM'
    THALES_MFA = 'THALES_MFA'
    VORMETRIC = 'VORMETRIC'
    THINKST_CANARY = 'THINKST_CANARY'
    THREATCONNECT_IOC = 'THREATCONNECT_IOC'
    THYCOTIC = 'THYCOTIC'
    THYCOTIC_DEVOPS_SECRETVAULT = 'THYCOTIC_DEVOPS_SECRETVAULT'
    TIPPING_POINT = 'TIPPING_POINT'
    TRENDMICRO_AV = 'TRENDMICRO_AV'
    TRENDMICRO_CLOUDAPPSECURITY = 'TRENDMICRO_CLOUDAPPSECURITY'
    TRENDMICRO_DEEP_SECURITY = 'TRENDMICRO_DEEP_SECURITY'
    TRENDMICRO_EDR = 'TRENDMICRO_EDR'
    TRENDMICRO_WEBPROXY = 'TRENDMICRO_WEBPROXY'
    TRIPWIRE_FIM = 'TRIPWIRE_FIM'
    TWILIO_AUDIT = 'TWILIO_AUDIT'
    UBIQUITI_SWITCH = 'UBIQUITI_SWITCH'
    UDM = 'UDM'
    ULTRA_CYBERFENCE = 'ULTRA_CYBERFENCE'
    ULTRADNS = 'ULTRADNS'
    UNBOUND_DNS = 'UNBOUND_DNS'
    UNIFI_AP = 'UNIFI_AP'
    UNIFI_SWITCH = 'UNIFI_SWITCH'
    UNIT21 = 'UNIT21'
    NIX_SYSTEM = 'NIX_SYSTEM'
    UPTYCS_EDR = 'UPTYCS_EDR'
    VANDYKE_SFTP = 'VANDYKE_SFTP'
    VARONIS = 'VARONIS'
    VECTRA_DETECT = 'VECTRA_DETECT'
    VECTRA_PROTECT = 'VECTRA_PROTECT'
    VECTRA_STREAM = 'VECTRA_STREAM'
    VEEAM = 'VEEAM'
    VENAFI = 'VENAFI'
    VERIZON_NDR = 'VERIZON_NDR'
    VERSA_FIREWALL = 'VERSA_FIREWALL'
    VIRUSTOTAL_THREAT_HUNTER = 'VIRUSTOTAL_THREAT_HUNTER'
    VMRAY_FLOG_XML = 'VMRAY_FLOG_XML'
    AIRWATCH = 'AIRWATCH'
    VMWARE_AVI_VANTAGE = 'VMWARE_AVI_VANTAGE'
    VMWARE_AVINETWORKS_IWAF = 'VMWARE_AVINETWORKS_IWAF'
    VMWARE_ESX = 'VMWARE_ESX'
    VMWARE_HCX = 'VMWARE_HCX'
    VMWARE_HORIZON = 'VMWARE_HORIZON'
    VMWARE_NSX = 'VMWARE_NSX'
    VMWARE_TANZU = 'VMWARE_TANZU'
    VMWARE_VCENTER = 'VMWARE_VCENTER'
    VMWARE_VREALIZE = 'VMWARE_VREALIZE'
    VMWARE_VSHIELD = 'VMWARE_VSHIELD'
    VMWARE_WORKSPACE_ONE = 'VMWARE_WORKSPACE_ONE'
    VOLTAGE = 'VOLTAGE'
    VSFTPD_AUDIT = 'VSFTPD_AUDIT'
    WATCHGUARD = 'WATCHGUARD'
    WAZUH = 'WAZUH'
    WTI_CONSOLE_SERVERS = 'WTI_CONSOLE_SERVERS'
    WHITECLOUD_EDR = 'WHITECLOUD_EDR'
    WINDOWS_APPLOCKER = 'WINDOWS_APPLOCKER'
    WINDOWS_DEFENDER_ATP = 'WINDOWS_DEFENDER_ATP'
    WINDOWS_DEFENDER_AV = 'WINDOWS_DEFENDER_AV'
    WINDOWS_DHCP = 'WINDOWS_DHCP'
    WINDOWS_DNS = 'WINDOWS_DNS'
    WINEVTLOG = 'WINEVTLOG'
    WINEVTLOG_XML = 'WINEVTLOG_XML'
    WINDOWS_FIREWALL = 'WINDOWS_FIREWALL'
    WINDOWS_NET_POLICY_SERVER = 'WINDOWS_NET_POLICY_SERVER'
    WINDOWS_SYSMON = 'WINDOWS_SYSMON'
    WIZ_IO = 'WIZ_IO'
    WORDPRESS_CMS = 'WORDPRESS_CMS'
    WORKDAY = 'WORKDAY'
    WORKDAY_AUDIT = 'WORKDAY_AUDIT'
    WORKSPACE_ACTIVITY = 'WORKSPACE_ACTIVITY'
    WORKSPACE_ALERTS = 'WORKSPACE_ALERTS'
    WORKSPACE_CHROMEOS = 'WORKSPACE_CHROMEOS'
    WORKSPACE_GROUPS = 'WORKSPACE_GROUPS'
    WORKSPACE_MOBILE = 'WORKSPACE_MOBILE'
    WORKSPACE_PRIVILEGES = 'WORKSPACE_PRIVILEGES'
    WORKSPACE_USERS = 'WORKSPACE_USERS'
    WORKSPOT_CONTROL = 'WORKSPOT_CONTROL'
    WP_ENGINE = 'WP_ENGINE'
    YUBICO_OTP = 'YUBICO_OTP'
    BRO_DHCP = 'BRO_DHCP'
    BRO_HTTP = 'BRO_HTTP'
    BRO_JSON = 'BRO_JSON'
    BRO_TSV = 'BRO_TSV'
    ZENDESK_CRM = 'ZENDESK_CRM'
    ZEROFOX_PLATFORM = 'ZEROFOX_PLATFORM'
    ZIMPERIUM = 'ZIMPERIUM'
    ZIX_EMAIL_ENCRYPTION = 'ZIX_EMAIL_ENCRYPTION'
    ZOOM_OPERATION_LOGS = 'ZOOM_OPERATION_LOGS'
    ZSCALER_WEBPROXY = 'ZSCALER_WEBPROXY'
    ZSCALER_CASB = 'ZSCALER_CASB'
    ZSCALER_DECEPTION = 'ZSCALER_DECEPTION'
    ZSCALER_DIGITAL_EXPERIENCE = 'ZSCALER_DIGITAL_EXPERIENCE'
    ZSCALER_DLP = 'ZSCALER_DLP'
    ZSCALER_DNS = 'ZSCALER_DNS'
    ZSCALER_FIREWALL = 'ZSCALER_FIREWALL'
    ZSCALER_VPN = 'ZSCALER_VPN'

class OutputGoogleChronicleBackpressureBehavior(str, Enum):
    r"""Whether to block, drop, or queue events when all receivers are exerting backpressure."""
    QUEUE = 'queue'
    DROP = 'drop'
    BLOCK = 'block'

class OutputGoogleChronicleCompression(str, Enum):
    r"""Codec to use to compress the persisted data."""
    NONE = 'none'
    GZIP = 'gzip'



@dataclasses.dataclass
class OutputGoogleChroniclePqControls:
    pass

class OutputGoogleChronicleQueueFullBehavior(str, Enum):
    r"""Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""
    BLOCK = 'block'
    DROP = 'drop'

class OutputGoogleChronicleRegion(str, Enum):
    r"""Regional endpoint to send events to"""
    MALACHITEINGESTION_PA_GOOGLEAPIS_COM = 'malachiteingestion-pa.googleapis.com'
    EUROPE_MALACHITEINGESTION_PA_GOOGLEAPIS_COM = 'europe-malachiteingestion-pa.googleapis.com'
    ASIA_SOUTHEAST1_MALACHITEINGESTION_PA_GOOGLEAPIS_COM = 'asia-southeast1-malachiteingestion-pa.googleapis.com'

class OutputGoogleChronicleType(str, Enum):
    GOOGLE_CHRONICLE = 'google_chronicle'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class OutputGoogleChronicle:
    log_type: OutputGoogleChronicleDefaultLogType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logType') }})
    r"""Default log type value to send to Chronicle. Can be overwritten by event field __logType."""
    type: OutputGoogleChronicleType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    api_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apiKey'), 'exclude': lambda f: f is None }})
    r"""Organization's API key in Google Chronicle"""
    api_key_secret: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apiKeySecret'), 'exclude': lambda f: f is None }})
    r"""Select (or create) a stored text secret"""
    authentication_method: Optional[OutputGoogleChronicleAuthenticationMethod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authenticationMethod'), 'exclude': lambda f: f is None }})
    compress: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compress'), 'exclude': lambda f: f is None }})
    r"""Whether to compress the payload body before sending."""
    concurrency: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('concurrency'), 'exclude': lambda f: f is None }})
    r"""Maximum number of ongoing requests before blocking."""
    customer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customerId'), 'exclude': lambda f: f is None }})
    r"""Unique identifier (UUID) corresponding to a particular Chronicle instance. Provided by your Chronicle representative."""
    environment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environment'), 'exclude': lambda f: f is None }})
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""
    extra_http_headers: Optional[list[OutputGoogleChronicleExtraHTTPHeaders]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extraHttpHeaders'), 'exclude': lambda f: f is None }})
    r"""Headers to add to all events."""
    extra_log_types: Optional[list[OutputGoogleChronicleExtraLogTypes]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extraLogTypes'), 'exclude': lambda f: f is None }})
    r"""Custom log types. If the value \\"Custom\\" is selected in the setting \\"Default log type\\" above, the first custom log type in this table will be automatically selected as default log type."""
    failed_request_logging_mode: Optional[OutputGoogleChronicleFailedRequestLoggingMode] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failedRequestLoggingMode'), 'exclude': lambda f: f is None }})
    r"""Determines which data should be logged when a request fails. Defaults to None.  All headers are redacted by default, except those listed under `Safe Headers`."""
    flush_period_sec: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flushPeriodSec'), 'exclude': lambda f: f is None }})
    r"""Maximum time between requests. Small values could cause the payload size to be smaller than the configured Max body size."""
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique ID for this output"""
    log_format_type: Optional[OutputGoogleChronicleSendEventsAs] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logFormatType'), 'exclude': lambda f: f is None }})
    log_text_field: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logTextField'), 'exclude': lambda f: f is None }})
    r"""Name of the event field that contains the log text to send. If not specified, Stream sends a JSON representation of the whole event."""
    max_payload_events: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxPayloadEvents'), 'exclude': lambda f: f is None }})
    r"""Max number of events to include in the request body. Default is 0 (unlimited)."""
    max_payload_size_kb: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxPayloadSizeKB'), 'exclude': lambda f: f is None }})
    r"""Maximum size, in KB, of the request body."""
    namespace: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('namespace'), 'exclude': lambda f: f is None }})
    r"""User-configured environment namespace to identify the data domain the logs originated from. Use namespace as a tag to identify the appropriate data domain for indexing and enrichment functionality. Can be overwritten by event field __namespace."""
    on_backpressure: Optional[OutputGoogleChronicleBackpressureBehavior] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('onBackpressure'), 'exclude': lambda f: f is None }})
    r"""Whether to block, drop, or queue events when all receivers are exerting backpressure."""
    pipeline: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pipeline'), 'exclude': lambda f: f is None }})
    r"""Pipeline to process data before sending out to this output."""
    pq_compress: Optional[OutputGoogleChronicleCompression] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pqCompress'), 'exclude': lambda f: f is None }})
    r"""Codec to use to compress the persisted data."""
    pq_controls: Optional[OutputGoogleChroniclePqControls] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pqControls'), 'exclude': lambda f: f is None }})
    pq_max_file_size: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pqMaxFileSize'), 'exclude': lambda f: f is None }})
    r"""The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)."""
    pq_max_size: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pqMaxSize'), 'exclude': lambda f: f is None }})
    r"""The maximum amount of disk space the queue is allowed to consume. Once reached, the system stops queueing and applies the fallback Queue-full behavior. Enter a numeral with units of KB, MB, etc."""
    pq_on_backpressure: Optional[OutputGoogleChronicleQueueFullBehavior] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pqOnBackpressure'), 'exclude': lambda f: f is None }})
    r"""Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""
    pq_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pqPath'), 'exclude': lambda f: f is None }})
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>."""
    pq_strict_ordering: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pqStrictOrdering'), 'exclude': lambda f: f is None }})
    r"""Toggle this off to forward new events to receiver(s) before queue is flushed. Otherwise, default drain behavior is FIFO (first in, first out)."""
    region: Optional[OutputGoogleChronicleRegion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('region'), 'exclude': lambda f: f is None }})
    r"""Regional endpoint to send events to"""
    reject_unauthorized: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rejectUnauthorized'), 'exclude': lambda f: f is None }})
    r"""Reject certs that are not authorized by a CA in the CA certificate path, or by another trusted CA (e.g., the system's CA). Defaults to Yes."""
    safe_headers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('safeHeaders'), 'exclude': lambda f: f is None }})
    r"""List of headers that are safe to log in plain text."""
    streamtags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('streamtags'), 'exclude': lambda f: f is None }})
    r"""Add tags for filtering and grouping in @{product}."""
    system_fields: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('systemFields'), 'exclude': lambda f: f is None }})
    r"""Set of fields to automatically add to events using this output. E.g.: cribl_pipe, c*. Wildcards supported."""
    timeout_sec: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeoutSec'), 'exclude': lambda f: f is None }})
    r"""Amount of time, in seconds, to wait for a request to complete before aborting it."""
    use_round_robin_dns: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useRoundRobinDns'), 'exclude': lambda f: f is None }})
    r"""Enable to use round-robin DNS lookup. When a DNS server returns multiple addresses, this will cause Stream to cycle through them in the order returned."""
    

