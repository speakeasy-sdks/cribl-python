"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from cribl import utils
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from typing import Any, Optional

class LicenseCls(str, Enum):
    PROD = 'prod'
    TRIAL = 'trial'
    FREE = 'free'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class License:
    r"""New License object"""
    cls: LicenseCls = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cls') }})
    email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email') }})
    exp: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exp') }})
    f_ph: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('f_ph') }})
    f_phg: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('f_phg') }})
    guid: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('guid') }})
    iat: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iat') }})
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    iss: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iss') }})
    license: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('license') }})
    quota: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quota') }})
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})
    limits: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limits'), 'exclude': lambda f: f is None }})
    

